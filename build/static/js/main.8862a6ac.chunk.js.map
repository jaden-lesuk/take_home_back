{"version":3,"sources":["components/Result.js","App.js","reportWebVitals.js","index.js"],"names":["Result","props","weather","App","state","city","onChange","e","setState","target","name","value","onSubmit","a","preventDefault","axios","post","then","response","data","style","styles","mainBody","Container","contentStyle","fluid","this","className","type","placeholder","Button","variant","size","block","Spinner","animation","React","Component","background","minHeight","paddingTop","paddingLeft","paddingRight","textAlign","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAEe,SAASA,EAAOC,GAC3B,OACI,8BACKA,EAAMC,U,ICGbC,E,4MACJC,MAAO,CACLC,KAAM,GACNH,QAAS,I,EAGXI,SAAW,SAACC,GAAD,OAAO,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAQH,EAAEE,OAAOE,S,EAE7DC,S,uCAAW,WAAOL,GAAP,SAAAM,EAAA,6DACTN,EAAEO,iBADO,SAEHC,IAAMC,KAAK,kDAAmD,CAACX,KAAM,EAAKD,MAAMC,OACrFY,MAAK,SAAAC,GAAQ,OAAI,EAAKV,SAAS,CAAEN,QAAUgB,EAASC,UAH5C,2C,kGAMX,WACE,OACE,qBAAKC,MAAOC,EAAOC,SAAnB,SACI,eAACC,EAAA,EAAD,CAAWH,MAAOC,EAAOG,aAAcC,OAAK,EAA5C,UACI,yDACA,uBAAMb,SAAUc,KAAKd,SAArB,UACE,qBAAKe,UAAU,OAAf,SACE,uBACIC,KAAO,OACPlB,KAAO,OACPiB,UAAU,eACVE,YAAc,WACdlB,MAASe,KAAKtB,MAAMC,KACpBC,SAAaoB,KAAKpB,aAGtB,cAACwB,EAAA,EAAD,CAAQC,QAAQ,OAAOH,KAAK,SAASI,KAAK,KAAKC,OAAK,EAApD,4BAIsB,KAAvBP,KAAKtB,MAAMF,QACV,qBAAKyB,UAAU,cAAf,SAA6B,cAACO,EAAA,EAAD,CAASC,UAAU,OAAOJ,QAAQ,YAC7D,cAAC/B,EAAD,CAAQE,QAASwB,KAAKtB,MAAMF,mB,GApC9BkC,IAAMC,WA4ClBhB,EAAS,CACbC,SAAU,CACRgB,WAAY,+CACZC,UAAW,QACXC,WAAY,OACZC,YAAa,OACbC,aAAc,QAEhBlB,aAAc,CACZmB,UAAW,SACXC,MAAO,UAIIzC,ICtDA0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8862a6ac.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Result(props) {\n    return (\n        <div>\n            {props.weather}\n        </div>\n    )\n}\n","import React from 'react'\nimport axios from 'axios'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {Container, Button, Spinner} from 'react-bootstrap'\n\nimport Result from './components/Result'\n\n\nclass App extends React.Component{\n  state ={\n    city: \"\",\n    weather: \"\"\n  }\n\n  onChange = (e) => this.setState({ [e.target.name] : e.target.value });\n\n  onSubmit = async (e) => {\n    e.preventDefault()\n    await axios.post('https://flask-backend-testing.herokuapp.com/api', {city: this.state.city})\n    .then(response => this.setState({ weather : response.data }))\n  }\n\n  render(){\n    return (\n      <div style={styles.mainBody}>\n          <Container style={styles.contentStyle} fluid>\n              <h1>What is the weather in?</h1>\n              <form onSubmit={this.onSubmit}>\n                <div className=\"mb-3\">\n                  <input \n                      type = \"text\"\n                      name = \"city\"\n                      className=\"form-control\"\n                      placeholder = \"City ...\"\n                      value = {this.state.city}\n                      onChange = { this.onChange }\n                      />\n                  </div>\n                  <Button variant=\"info\" type=\"submit\" size=\"md\" block>Get Weather</Button>\n               </form>\n\n               {\n                 this.state.weather === \"\"?\n                  <div className=\"text-center\"><Spinner animation=\"grow\" variant=\"light\" /></div>\n                  : <Result weather={this.state.weather} />\n               }\n          </Container>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  mainBody: {\n    background: 'linear-gradient(to bottom, #e55d87, #5fc3e4)',\n    minHeight: '100vh',\n    paddingTop: '10vh',\n    paddingLeft: '20vh',\n    paddingRight: '20vh',\n  },\n  contentStyle: {\n    textAlign: 'center',\n    color: 'white'\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}